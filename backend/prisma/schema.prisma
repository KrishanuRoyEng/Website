generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
  PENDING
  SUSPENDED
}

enum Permission {
  VIEW_DASHBOARD
  MANAGE_MEMBERS
  MANAGE_PROJECTS
  MANAGE_EVENTS
  MANAGE_SKILLS
  MANAGE_TAGS
  MANAGE_ROLES
}

enum ProjectCategory {
  WEB
  AI
  UIUX
}

model CustomRole {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  color       String      @default("#6B7280")
  permissions Permission[]
  position    Int         @default(0) // (higher = higher rank)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdBy   Int?        @map("created_by")

  users       User[]      @relation("RoleUsers")
  creator     User?       @relation("RoleCreator", fields: [createdBy], references: [id])

  @@map("custom_roles")
}

model User {
  id           Int         @id @default(autoincrement())
  githubId     String      @unique @map("github_id")
  username     String      @unique
  email        String?     @unique
  avatarUrl    String?     @map("avatar_url")
  githubUrl    String?     @map("github_url")
  role         UserRole    @default(PENDING)
  customRoleId Int?        @map("custom_role_id")
  suspensionReason String? @map("suspension_reason") @db.Text
  isActive     Boolean     @default(false) @map("is_active")
  isLead       Boolean     @default(false) @map("is_lead")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  member        Member?
  createdEvents Event[]
  
  customRole    CustomRole? @relation("RoleUsers", fields: [customRoleId], references: [id])
  createdRoles  CustomRole[] @relation("RoleCreator")

  @@map("users")
}

model Member {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  fullName    String?  @map("full_name")
  bio         String?  @db.Text
  roleTitle   String?  @map("role_title")
  devStack    String?  @map("dev_stack")
  linkedinUrl String?  @map("linkedin_url")
  portfolioUrl String? @map("portfolio_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills   MemberSkill[]
  projects Project[]

  @@map("members")
}

model Skill {
  id       Int    @id @default(autoincrement())
  name     String @unique
  category String?

  members MemberSkill[]

  @@map("skills")
}

model MemberSkill {
  memberId Int @map("member_id")
  skillId  Int @map("skill_id")

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  skill  Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([memberId, skillId])
  @@map("member_skills")
}

model Project {
  id          Int             @id @default(autoincrement())
  memberId    Int             @map("member_id")
  title       String
  description String?         @db.Text
  githubUrl   String?         @map("github_url")
  liveUrl     String?         @map("live_url")
  imageUrl    String?         @map("image_url")
  category    ProjectCategory?
  isApproved  Boolean         @default(false) @map("is_approved")
  isRejected  Boolean         @default(false) @map("is_rejected")
  rejectionReason String?        @map("rejection_reason") @db.Text
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  member Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  tags   ProjectTag[]

  @@map("projects")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects ProjectTag[]

  @@map("tags")
}

model ProjectTag {
  projectId Int @map("project_id")
  tagId     Int @map("tag_id")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
  @@map("project_tags")
}

model Event {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?  @db.Text
  eventDate       DateTime @map("event_date")
  location        String?
  imageUrl        String?  @map("image_url")
  registrationUrl String?  @map("registration_url")
  isFeatured      Boolean  @default(false) @map("is_featured")
  isUpcoming      Boolean  @default(true) @map("is_upcoming")
  createdBy       Int?     @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  creator User? @relation(fields: [createdBy], references: [id])

  @@map("events")
}